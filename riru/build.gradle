import org.apache.tools.ant.filters.FixCrLfFilter
import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files
import java.security.MessageDigest

plugins {
    id 'com.android.application'
}

def versionNameShort = "v${riruApiVersion}.${versionNameMinor}.${versionNamePatch}"
def versionName = "${versionNameShort}.r${gitCommitCount}.${gitCommitId}"
def versionCode = gitCommitCount

def apiVersion = rootProject.ext.riruApiVersion
def minApiVersion = rootProject.ext.riruMinApiVersion
def moduleProp = [
        id         : "riru-core",
        name       : "Riru",
        version    : "$versionName",
        versionCode: "$versionCode",
        author     : "Rikka",
        description: "Inject into zygote and run codes from \"Riru\" modules in apps or the system server.",
        riruApi    : "$apiVersion",
        riruMinApi : "$minApiVersion"
]

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        externalNativeBuild {
            cmake {
                arguments "-DRIRU_VERSION_NAME:STRING=$versionNameShort",
                        "-DRIRU_VERSION_CODE:STRING=$versionCode",
                        "-DRIRU_API_VERSION=$apiVersion",
                        "-DRIRU_MIN_API_VERSION=$minApiVersion",
                        "-DANDROID_STL=none"
            }
        }
        multiDexEnabled false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        prefab true
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    lintOptions.checkReleaseBuilds false
    dependenciesInfo.includeInApk false
}

repositories {
    mavenLocal()
}

dependencies {
    implementation 'dev.rikka.ndk.thirdparty:xhook:1.2.0'
    implementation 'dev.rikka.ndk.thirdparty:cxx:1.1.0'
    implementation 'dev.rikka.ndk.thirdparty:proc-maps-parser:1.0.0'
    implementation 'androidx.annotation:annotation:1.2.0'
    compileOnly project(':stub')
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "${project.name}.apk"
    }
}

static def sha256sum(file) {
    def md = MessageDigest.getInstance("SHA-256")
    file.eachByte 4096, { bytes, size ->
        md.update(bytes, 0, size);
    }
    return md.digest().encodeHex()
}

afterEvaluate {
    android.applicationVariants.forEach { variant ->
        def variantCapped = variant.name.capitalize()
        def variantLowered = variant.name.toLowerCase()

        def zipName = "riru-${versionNameShort}-${variantLowered}.zip"
        def magiskDir = file("$outDir/magisk_module_$variantLowered")
        def isWindows = OperatingSystem.current().isWindows()

        task("prepareMagiskFiles${variantCapped}") {
            dependsOn("assemble$variantCapped")

            doFirst {
                delete { delete magiskDir }

                copy {
                    println "$rootDir/app/build/outputs/apk/$variantLowered/riru.apk"
                    from "$rootDir/app/build/outputs/apk/$variantLowered/riru.apk"
                    into magiskDir.path
                    rename { "app.apk" }
                }
                copy {
                    from "$rootDir/template/magisk_module"
                    into magiskDir.path
                    exclude 'customize.sh', 'util_functions.sh'
                }
                copy {
                    from file("$rootDir/template/magisk_module/customize.sh"), file("$rootDir/template/magisk_module/util_functions.sh")
                    into magiskDir.path
                    filter { line ->
                        line.replaceAll('%%%RIRU_API%%%', apiVersion.toString())
                                .replaceAll('%%%RIRU_VERSION_CODE%%%', versionCode.toString())
                                .replaceAll('%%%RIRU_VERSION_NAME%%%', versionName)
                    }
                    filter(FixCrLfFilter.class,
                            eol: FixCrLfFilter.CrLf.newInstance("lf"))
                }

                // copy .git files manually since gradle exclude it by default
                Files.copy(file("$rootDir/template/magisk_module/.gitattributes").toPath(), file("${magiskDir.path}/.gitattributes").toPath())

                def modulePropText = ""
                moduleProp.each { k, v -> modulePropText += "$k=$v\n" }
                modulePropText = modulePropText.trim()
                file("$magiskDir/module.prop").text = modulePropText
            }

            def nativeOutDir = file("build/intermediates/cmake/$variant.name/obj")

            doLast {
                copy {
                    from "$nativeOutDir"
                    into "$magiskDir/lib"
                    exclude "**/*.txt"
                }

                copy {
                    from zipTree(file("build/outputs/apk/${variant.name}/${project.name}.apk")).matching { include 'classes.dex' }.singleFile
                    into magiskDir
                }

                fileTree("$magiskDir").visit { f ->
                    if (f.directory) return
                    file(f.file.path + ".sha256sum").text = sha256sum(f.file)
                }
            }
        }

        task("zip${variantCapped}", type: Zip) {
            dependsOn("prepareMagiskFiles${variantCapped}")
            from magiskDir
            archiveName zipName
            destinationDir outDir
        }

        task("push${variantCapped}", type: Exec) {
            dependsOn("assemble${variantCapped}")
            workingDir outDir
            def commands = [android.adbExecutable, "push",
                            zipName,
                            "/data/local/tmp/"]
            if (isWindows) {
                commandLine 'cmd', '/c', commands.join(" ")
            } else {
                commandLine commands
            }
        }

        task("flash${variantCapped}", type: Exec) {
            dependsOn("push${variantCapped}")
            def commands = [android.adbExecutable, "shell", "su", "-c",
                            "magisk --install-module /data/local/tmp/${zipName}"]
            if (isWindows) {
                commandLine 'cmd', '/c', commands.join(" ")
            } else {
                commandLine commands
            }
        }

        task("flashAndReoot${variantCapped}", type: Exec) {
            dependsOn("flash${variantCapped}")
            def commands = [android.adbExecutable, "shell", "reboot"]
            if (isWindows) {
                commandLine 'cmd', '/c', commands.join(" ")
            } else {
                commandLine commands
            }
        }

        variant.assembleProvider.get().dependsOn(":app:assemble${variantCapped}")
        variant.assembleProvider.get().finalizedBy("zip${variantCapped}")
    }
}

